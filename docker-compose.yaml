version: '3.8'

x-airflow-common: &airflow-common
  build: 
    context: ./airflow
    dockerfile: Dockerfile
  environment:
    - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
    - AIRFLOW__CORE__FERNET_KEY=FB0o_zt4e3Ziq4jTzPNJXLiVr3AgK7JQUEzY_LgG0A4=
    - AIRFLOW__CORE__LOAD_EXAMPLES=false
    - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
    - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=true
    - AIRFLOW_CONN_SPORT_ADVANTAGES_DB=postgresql://${SPORT_POSTGRES_USER}:${SPORT_POSTGRES_PASSWORD}@business-postgres:${SPORT_POSTGRES_INTERNAL_PORT}/${SPORT_POSTGRES_DB}
    - AIRFLOW_CONN_REDPANDA=kafka://redpanda:9092
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./airflow/config:/opt/airflow/config
  depends_on:
    - airflow-postgres
  networks:
    - sport_network

services:
  airflow-postgres:
    image: postgres:14
    container_name: sport-advantages-airflow-postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data
    ports:
      - "${AIRFLOW_POSTGRES_PORT}:5432"
    networks:
      - sport_network

  # Base de données PostgreSQL
  business-postgres:
    image: postgres:14
    container_name: sport-advantages-postgres
    environment:
      POSTGRES_USER: ${SPORT_POSTGRES_USER}
      POSTGRES_PASSWORD: ${SPORT_POSTGRES_PASSWORD}
      POSTGRES_DB: ${SPORT_POSTGRES_DB}
    ports:
      - "${SPORT_POSTGRES_PORT}:${SPORT_POSTGRES_INTERNAL_PORT}"
    volumes:
      - business_postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
      - ./postgres-config/postgresql.conf:/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SPORT_POSTGRES_USER} -d ${SPORT_POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sport_network

  # Redpanda - Alternative à Kafka pour le streaming de données
  redpanda:
    image: redpandadata/redpanda:latest
    container_name: sport-advantages-redpanda
    command:
      - redpanda
      - start
      - --smp=1
      - --memory=1G
      - --reserve-memory=0M
      - --overprovisioned
      - --node-id=0
      - --check=false
      - --kafka-addr PLAINTEXT://0.0.0.0:9092,OUTSIDE://0.0.0.0:19092
      - --advertise-kafka-addr PLAINTEXT://redpanda:9092,OUTSIDE://localhost:19092
      - --rpc-addr 0.0.0.0:33145
      - --advertise-rpc-addr redpanda:33145
    ports:
      - "9092:9092"
      - "19092:19092"
    volumes:
      - redpanda:/var/lib/redpanda/data
    depends_on:
      business-postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - sport_network

  # Redpanda Console - Interface UI pour Redpanda
  redpanda-console:
    image: redpandadata/console:latest
    container_name: sport-advantages-redpanda-console
    depends_on:
      redpanda:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      - KAFKA_BROKERS=redpanda:9092
    networks:
      - sport_network

  # Debezium - Pour capturer les changements de la base de données (CDC)
  debezium:
    image: debezium/connect:2.4
    container_name: sport-advantages-debezium
    depends_on:
      business-postgres:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      - BOOTSTRAP_SERVERS=redpanda:9092
      - GROUP_ID=${DEBEZIUM_GROUP_ID}
      - CONFIG_STORAGE_TOPIC=${DEBEZIUM_CONFIG_STORAGE_TOPIC}
      - OFFSET_STORAGE_TOPIC=${DEBEZIUM_OFFSET_STORAGE_TOPIC}
      - STATUS_STORAGE_TOPIC=${DEBEZIUM_STATUS_STORAGE_TOPIC}
    healthcheck: 
      test: ["CMD-SHELL", "curl -s -f http://localhost:8083/connectors > /dev/null || exit 1"]
      interval: 5s
      timeout: 10s
      retries: 10
    command: >
      sh -c "
        /docker-entrypoint.sh start &
        until curl -X POST http://localhost:8083/connectors -H 'Content-Type: application/json' -d '{
          \"name\": \"sport-advantages-postgres-connector\",
          \"config\": {
            \"connector.class\": \"io.debezium.connector.postgresql.PostgresConnector\",
            \"database.hostname\": \"business-postgres\",
            \"database.port\": \"${SPORT_POSTGRES_PORT}\",
            \"database.user\": \"${SPORT_POSTGRES_USER}\",
            \"database.password\": \"${SPORT_POSTGRES_PASSWORD}\",
            \"database.dbname\": \"${SPORT_POSTGRES_DB}\",
            \"database.server.name\": \"sport-advantages\",
            \"table.include.list\": \"sport_advantages.sport_activities\",
            \"plugin.name\": \"pgoutput\",
            \"topic.prefix\" : \"sport\",
            \"snapshot.mode\": \"initial\"
          }
        }'; do
          sleep 2
        done &&
        tail -f /dev/null"
    networks:
      - sport_network

  init-db-commute-validation:
    build:
      context: ./commute_validation
      dockerfile: Dockerfile
    container_name: sport-advantages-init-db
    depends_on:
      business-postgres:
        condition: service_healthy

    volumes:
      - ./commute_validation:/app
    environment:
      - DB_HOST=${SPORT_POSTGRES_HOST}
      - DB_USER=${SPORT_POSTGRES_USER}
      - DB_PASSWORD=${SPORT_POSTGRES_PASSWORD}
      - DB_NAME=${SPORT_POSTGRES_DB}
      - DB_PORT=${SPORT_POSTGRES_INTERNAL_PORT}
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
    networks:
      - sport_network

  # Service Python pour générer les données et les insérer dans PostgreSQL
  data-generator:
    build:
      context: ./activity_generator
      dockerfile: Dockerfile
    container_name: sport-advantages-data-generator
    depends_on:
      init-db-commute-validation:
        condition: service_completed_successfully
      debezium:
        condition: service_healthy
    volumes:
      - ./activity_generator:/app
    environment:
      - DB_HOST=${SPORT_POSTGRES_HOST}
      - DB_USER=${SPORT_POSTGRES_USER}
      - DB_PASSWORD=${SPORT_POSTGRES_PASSWORD}
      - DB_PORT=${SPORT_POSTGRES_INTERNAL_PORT}
      - DB_NAME=${SPORT_POSTGRES_DB}
    networks:
      - sport_network

# Airflow Webserver
  airflow-webserver:
    <<: *airflow-common
    container_name: sport-advantages-airflow-webserver
    command: webserver
    depends_on:
      - airflow-postgres
      - airflow-init
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - sport_network

  # Airflow Scheduler
  airflow-scheduler:
    <<: *airflow-common
    container_name: sport-advantages-airflow-scheduler
    command: scheduler
    depends_on:
      - airflow-postgres
      - airflow-init
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - sport_network

  # Airflow Init (initialise la base de données et crée le premier utilisateur)
  airflow-init:
    <<: *airflow-common
    container_name: sport-advantages-airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        set -e
        if [[ -z "$(ls -A /opt/airflow/logs)" ]]; then
          mkdir -p /opt/airflow/logs
        fi
        airflow db init
        airflow users create \
          --username admin \
          --password admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com
    restart: on-failure
    networks:
      - sport_network

volumes:
  business_postgres_data:
  airflow_postgres_data:
  minio_data:
  redpanda:

networks:
  sport_network:
    driver: bridge